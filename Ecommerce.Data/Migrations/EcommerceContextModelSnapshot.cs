// <auto-generated />
using System;
using Ecommerce.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce.Data.Migrations
{
    [DbContext(typeof(EcommerceContext))]
    partial class EcommerceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Models.Lote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaAlta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdProducto");

                    b.ToTable("Lotes");
                });

            modelBuilder.Entity("Ecommerce.Models.Producto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaAlta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("IdTipoProducto")
                        .HasColumnType("int");

                    b.Property<string>("Imagen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("DECIMAL");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoProducto");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Activo = false,
                            Descripcion = "Chomba Lacoste Blanca: es un ícono de elegancia casual. Confeccionada en algodón premium, ofrece una textura suave y transpirable, perfecta para cualquier ocasión. Su diseño clásico incluye el emblemático logo del cocodrilo bordado en el pecho, cuello tipo polo con botones ajustables y un ajuste regular que se adapta cómodamente a diferentes tipos de cuerpo.",
                            FechaAlta = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdTipoProducto = 1,
                            Imagen = "https://caradec-lorefice-sato-bucket.s3.us-east-2.amazonaws.com/c451baf0-fd10-401c-9c3b-5ea3d79a6420.jpg",
                            Precio = 60000m
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Activo = false,
                            Descripcion = "Jeans Levi's Azul: son un básico imprescindible en cualquier guardarropa. Fabricados con denim de alta calidad, ofrecen una combinación perfecta de durabilidad y comodidad. Su diseño atemporal presenta un corte clásico de cinco bolsillos, cierre de cremallera con botón y el icónico parche de cuero con el logotipo Levi's en la parte trasera.",
                            FechaAlta = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdTipoProducto = 2,
                            Imagen = "https://caradec-lorefice-sato-bucket.s3.us-east-2.amazonaws.com/f10695c4-85f7-4768-8d41-819b3dd868ce.jpg",
                            Precio = 100000m
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Activo = false,
                            Descripcion = "Zapatillas Hush Puppies Marrones: ofrecen una combinación perfecta de estilo y comodidad. Fabricadas con materiales de alta calidad, presentan un diseño casual y versátil ideal para el día a día. Su suela antideslizante y su plantilla acolchada garantizan soporte y confort durante todo el día. Perfectas para combinar con jeans o pantalones chinos, estas zapatillas son el complemento ideal para un look relajado pero elegante.",
                            FechaAlta = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdTipoProducto = 3,
                            Imagen = "https://caradec-lorefice-sato-bucket.s3.us-east-2.amazonaws.com/c0e51c96-4bb5-4162-b4cd-fd116aa17909.jpg",
                            Precio = 850000m
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Activo = false,
                            Descripcion = "Camisa Denim Verde: camisa formal que redefine la elegancia casual con un toque moderno. Confeccionada en tela de mezclilla de alta calidad, ofrece un acabado refinado que la convierte en la opción perfecta para ocasiones formales o semi-formales. Su corte ajustado y detalles clásicos, como el cuello rígido y los botones en tono contrastante, aseguran un estilo impecable. Combínala con pantalones oscuros para un look profesional o con chinos para un outfit más relajado pero sofisticado.\r\n\r\n",
                            FechaAlta = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdTipoProducto = 4,
                            Imagen = "https://caradec-lorefice-sato-bucket.s3.us-east-2.amazonaws.com/d1a844bf-fda5-4d13-9e0d-f62bfeabdfba.jpg",
                            Precio = 54200m
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaAlta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = false,
                            Descripcion = "Admin",
                            FechaAlta = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Activo = false,
                            Descripcion = "Cliente",
                            FechaAlta = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.TipoProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaAlta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.ToTable("TipoProductos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = false,
                            Descripcion = "Remeras",
                            FechaAlta = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Activo = false,
                            Descripcion = "Pantalones",
                            FechaAlta = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Activo = false,
                            Descripcion = "Calzado",
                            FechaAlta = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Activo = false,
                            Descripcion = "Camisas",
                            FechaAlta = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CognitoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaAlta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IdRol");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4b3e2b5-7b1e-4e1e-8b41-5b9e3e4f1e6a"),
                            Activo = false,
                            Apellido = "Admin",
                            CognitoId = "e17bb540-1001-705b-ecb6-42c780157de1",
                            Email = "satoramirodev+adminecommerce@gmail.com",
                            FechaAlta = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdRol = 1,
                            Nombre = "Admin",
                            Password = "m19oaVI3BqvY+u0UTODe/OtXhmlcysjSsAi/yPGf5gc="
                        },
                        new
                        {
                            Id = new Guid("4f892c22-903b-469b-34de-08dd40dbec02"),
                            Activo = false,
                            Apellido = "Sato",
                            CognitoId = "a1ab2500-90f1-7031-0fe8-040f4cb9ca6f",
                            Email = "satoramirodev@gmail.com",
                            FechaAlta = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdRol = 1,
                            Nombre = "Ramiro",
                            Password = "FEjejD8NNYoAX4bxGfftXTuh/vot6HKIO2rk29gXRCM="
                        },
                        new
                        {
                            Id = new Guid("fed99fa7-c058-4958-1fe6-08dd42d0b35f"),
                            Activo = false,
                            Apellido = "Caradec",
                            CognitoId = "819b4550-a071-7055-250d-fda6f1d6351a",
                            Email = "maricaradec@gmail.com",
                            FechaAlta = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdRol = 2,
                            Nombre = "Mariana",
                            Password = "b1Qt0lD5brjIRUrdPDGsu8F7zArS4JIhqkZtrdtrJF8="
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.Wishlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario")
                        .IsUnique();

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("ProductoWishlist", b =>
                {
                    b.Property<Guid>("ProductosId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WishlistsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductosId", "WishlistsId");

                    b.HasIndex("WishlistsId");

                    b.ToTable("WishlistsProductos", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Models.Lote", b =>
                {
                    b.HasOne("Ecommerce.Models.Producto", "Producto")
                        .WithMany("Lotes")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Ecommerce.Models.Producto", b =>
                {
                    b.HasOne("Ecommerce.Models.TipoProducto", "TipoProducto")
                        .WithMany("Productos")
                        .HasForeignKey("IdTipoProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoProducto");
                });

            modelBuilder.Entity("Ecommerce.Models.Usuario", b =>
                {
                    b.HasOne("Ecommerce.Models.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Ecommerce.Models.Wishlist", b =>
                {
                    b.HasOne("Ecommerce.Models.Usuario", "Usuario")
                        .WithOne("Wishlist")
                        .HasForeignKey("Ecommerce.Models.Wishlist", "IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ProductoWishlist", b =>
                {
                    b.HasOne("Ecommerce.Models.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.Wishlist", null)
                        .WithMany()
                        .HasForeignKey("WishlistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.Models.Producto", b =>
                {
                    b.Navigation("Lotes");
                });

            modelBuilder.Entity("Ecommerce.Models.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Ecommerce.Models.TipoProducto", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Ecommerce.Models.Usuario", b =>
                {
                    b.Navigation("Wishlist")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
